[1/10] Performing build step for 'bootloader'
[1/1] cd /home/kbuntu/ESP32/UART_Bit_Bang/UART/build/bootloader/esp-idf/esptool_py && /home/kbuntu/.espressif/python_env/idf5.3_py3.12_env/bin/python /home/kbuntu/ESP32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/kbuntu/ESP32/UART_Bit_Bang/UART/build/bootloader/bootloader.bin
Bootloader binary size 0x6880 bytes. 0x780 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/UART_Source.c.obj
/home/kbuntu/ESP32/UART_Bit_Bang/UART/main/UART_Source.c:35:17: warning: 'gpio' defined but not used [-Wunused-variable]
   35 | static uint32_t gpio;
      |                 ^~~~
[3/8] Linking C static library esp-idf/main/libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable UART.elf
[6/8] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/kbuntu/ESP32/UART_Bit_Bang/UART/build/UART.bin
[7/8] cd /home/kbuntu/ESP32/UART_Bit_Bang/UART/build/esp-idf/esptool_py && /home/kbuntu/.espressif/python_env/idf5.3_py3.12_env/bin/python /home/kbuntu/ESP32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/kbuntu/ESP32/UART_Bit_Bang/UART/build/partition_table/partition-table.bin /home/kbuntu/ESP32/UART_Bit_Bang/UART/build/UART.bin
UART.bin binary size 0x2ecd0 bytes. Smallest app partition is 0x100000 bytes. 0xd1330 bytes (82%) free.
[7/8] cd /home/kbuntu/ESP32/esp-idf/components/esptool_py && /usr/bin/cmake -D IDF_PATH=/home/kbuntu/ESP32/esp-idf -D "SERIAL_TOOL=/home/kbuntu/.espressif/python_env/idf5.3_py3.12_env/bin/python;;/home/kbuntu/ESP32/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D WORKING_DIRECTORY=/home/kbuntu/ESP32/UART_Bit_Bang/UART/build -P /home/kbuntu/ESP32/esp-idf/components/esptool_py/run_serial_tool.cmake
esptool.py --chip esp32 -p /dev/ttyUSB0 -b 115200 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 UART.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.8.1
Serial port /dev/ttyUSB0
Connecting.............................
Chip is ESP32-D0WD-V3 (revision v3.1)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
WARNING: Detected crystal freq 15.55MHz is quite different to normalized freq 26MHz. Unsupported crystal in use?
Crystal is 26MHz
MAC: e8:6b:ea:cf:ca:3c
Uploading stub...
Running stub...
Stub running...
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0003efff...
Flash will be erased from 0x00008000 to 0x00008fff...
SHA digest in image updated
Compressed 26752 bytes to 16352...
Writing at 0x00001000... (100 %)
Wrote 26752 bytes (16352 compressed) at 0x00001000 in 1.3 seconds (effective 166.9 kbit/s)...
Hash of data verified.
Compressed 191696 bytes to 102032...
Writing at 0x00010000... (14 %)
Writing at 0x0001cbb9... (28 %)
Writing at 0x0002260a... (42 %)
Writing at 0x000284aa... (57 %)
Writing at 0x0002fc6d... (71 %)
Writing at 0x000372fa... (85 %)
Writing at 0x0003d4fb... (100 %)
Wrote 191696 bytes (102032 compressed) at 0x00010000 in 4.2 seconds (effective 362.2 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 273.1 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
